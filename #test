var sheetName = 'ชีต1'
		var scriptProp = PropertiesService.getScriptProperties()

		function intialSetup () {
		  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet()
		  scriptProp.setProperty('key', activeSpreadsheet.getId())
		}

		function doPost (e) {
		  var lock = LockService.getScriptLock()
		  lock.tryLock(10000)

		  try {
			var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))
			var sheet = doc.getSheetByName(sheetName)

			var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]
			var nextRow = sheet.getLastRow() + 1

			var newRow = headers.map(function(header) {
			  return header === 'timestamp' ? new Date() : e.parameter[header]
			})
			sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])

			return ContentService
			  .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
			  .setMimeType(ContentService.MimeType.JSON)
		  }

		  catch (e) {
			return ContentService
			  .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
			  .setMimeType(ContentService.MimeType.JSON)
		  }

		  finally {
			lock.releaseLock()
		  }
		}




		document.getElementById('borrowForm').addEventListener('submit', function(event) {
            event.preventDefault();

            // Get form values
            const borrowDate = document.getElementById('borrowDate').value;
            const studentId = document.getElementById('studentId').value;
            const studentName = document.getElementById('studentName').value;
            const equipment = document.getElementById('equipment').value;
            const errorMessageDiv = document.getElementById('error-message');

            fetch('https://script.google.com/macros/s/AKfycbzYqapz6WxNBXUrGfRrrInm9r-4ZegWy1gsE5XB58T4gu7306yKQi0m3CT_c5Ehgpw/exec', {
                method: 'POST',
                body: new URLSearchParams({ 
                    dateTime: borrowDate,
                    studentId: studentId,
                    studentName: studentName,
                    equipment: equipment 
                }),
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
})
            .then(response => response.text())
            .then(data => {
                console.log(data); // For debugging purposes
                alert('คำขอยืมถูกส่งแล้ว');
                // Redirect to approval page after submission
                window.location.href = 'approval.html';
            })
            .catch(error => {
                console.error('Error:', error);
                alert('เกิดข้อผิดพลาดในการส่งคำขอ');
            });
        });


		body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .container h1 {
            font-size: 24px;
            margin: 1rem 0 2rem 0;
            color: #333;
            font-weight: 1000;
        }

        .pagination {
            text-align: center;
            margin: 20px 0;
        }
        .pagination button {
            padding: 10px 15px;
            margin: 0 5px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .pagination button:hover {
            background-color: #0056b3;
        }
        .pagination .disabled {
            background-color: #c0c0c0;
            cursor: not-allowed;
        }

        .navbar.navbar-expand-lg {
            background-color: #e6edf4;
            margin: 0 0 2rem 0;
            padding: 1rem;
            border-radius: 8px; /* Added for a smoother look */
        }
        
        .navbar-brand {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }
        
        .navbar-nav {
            font-size: 1.5rem;
            color: #333;
            display: flex;
            gap: 1rem;
        }
        
        .container-fluid {
            padding: 0 0 0 9rem;
        }
        
        .nav-link {
            position: relative;
            display: inline-block;
            padding: 10px 15px;
            color: #333;
            text-decoration: none;
            border-radius: 8px;
            transition: background-color 0.4s, border-radius 0.4s, color 0.4s;
        }
        
        .nav-link::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 3px;
            background-color: #c82333;
            transform: scaleX(0);
            transform-origin: bottom right;
            transition: transform 0.4s;
        }
        
        .nav-link:hover::after {
            transform: scaleX(1);
            transform-origin: bottom left;
        }
        
        .nav-link:hover {
            color: #ff6600; 
        }
        
        .nav-link.active, 
        .nav-link.active::after {
            color: #ff6600; 
            background-color: #ffffff; 
            border-radius: 8px;
        }
        
        .nav-link.active::after {
            transform: scaleX(1); 
            transform-origin: bottom left; 
        }
        
        
        .collapse .navbar-collapse a{
            margin: 0 2rem 0 2rem;
        }
        
        .button.disabled {
            background-color: #c0c0c0;
            cursor: not-allowed;
            opacity: 0.6;
        }
        
        .button.disabled:hover {
            background-color: #c0c0c0;
            transform: none;
        }
        @media (max-width: 768px) {
            .navbar-nav {
                flex-direction: column; 
            }
            table {
                font-size: 14px; 
            }
        }

        #searchButton {
            border-radius: 18px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        #searchButton:hover {
            background-color: #0056b3;
        }
        
        #returnButton {
            display: none; /* Hide initially */
            padding: 10px 20px;
            margin-top: 20px;
            background-color: #ff5722;
            color: white;
            font-size: 1rem;
            font-weight: bold;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 1px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        #returnButton:hover {
            background-color: #e64a19;
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }
        
        #returnButton:active {
            background-color: #d84315;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
            transform: translateY(0);
        }
        
        #borrowedItems {
            display: flex;
            flex-direction: column;
            align-items: center; /* Center align items */
            gap: 10px;
        }
        
        #borrowedItems p {
            display: flex;
            align-items: center;
            gap: 10px;
        }


		/* เลือกsheet

		var scriptProp = PropertiesService.getScriptProperties();

function intialSetup() {
  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  scriptProp.setProperty('key', activeSpreadsheet.getId());
}

function doPost(e) {
  var lock = LockService.getScriptLock();
  lock.tryLock(10000);

  try {
    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    
    // เลือกชีตตามพารามิเตอร์ที่ส่งมา เช่น 'Sheet1' หรือ 'Sheet2'
    var sheetName = e.parameter.sheetName || 'Sheet2'; // ค่าเริ่มต้นเป็น 'Sheet1'
    var sheet = doc.getSheetByName(sheetName);

    if (!sheet) {
      return ContentService
        .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'Sheet not found' }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var nextRow = sheet.getLastRow() + 1;

    var newRow = headers.map(function(header) {
      return e.parameter[header] || ''; // กำหนดให้ return ค่าว่างหากไม่มีพารามิเตอร์
    });

    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (e) {
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
      .setMimeType(ContentService.MimeType.JSON);
  } finally {
    lock.releaseLock();
  }
}
*/